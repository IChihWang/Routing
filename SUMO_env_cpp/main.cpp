#include <iostream>
#include <sstream>
#include <string>
#include <fstream>
#include "global.h"
#include "server.h"
#include "json.hpp"

using namespace std;
using json = nlohmann::json;


SUMO_Traci traci;
uint16_t _N_TIME_STEP;
float _TIME_STEP;

map<string, string> src_dst_dict;

void initial_sumo();
void read_src_dst_file(string src_dst_file_name);
void run_sumo();

int main(int argc, char* argv[])
{
    cout << "Usage: ./main <grid_size> <src_dst_file.json>" << endl;

    string src_dst_file_name = "data/routes/";
    // Parse the input
    if (argc >= 3) {
        string grid_size_str = argv[1];
        _grid_size = stoi(grid_size_str);
        src_dst_file_name += argv[2];
    }
    else {
        cout << "Wrong number of arguments" << endl;
        exit(-1);
    }

    // Read src_dst_dict
    read_src_dst_file(src_dst_file_name);

    // Initialization
    initial_client_handler();
    initial_sumo();

    Thread_Worker router_thread;     // New thread to send/receive routing requests/results  (do this after initial_client_handler();)

    // Run sumo simulation (run_sumo in python version)
    traci.simulationStep(5);

    // SUMO simulation
    run_sumo();


    // TODO: get result from router first before updating the str

    traci.close();

    return 0;
}

// Initial SUMO
void initial_sumo() {
    traci.connect("localhost", SUMO_PORT);
}

// Read the source/destination file generated by python
void read_src_dst_file(string src_dst_file_name) {
    ifstream file(src_dst_file_name);

    if (!file.is_open()) {
        cout << "Fail to open the src_dst file in data/routes/" << endl;
        exit(-1);
    }

    json data;
    file >> data;
    file.close();

    for (const auto& src_dst_data_map : data.items()) {
        string car_id = src_dst_data_map.key();
        tuple<uint16_t, uint16_t, string> src_dst_data = src_dst_data_map.value();
        src_dst_dict[car_id] = get<2>(src_dst_data);
    }
}

void run_sumo() {
    uint64_t simu_step = 0;

    // Create a list with intersection managers

}